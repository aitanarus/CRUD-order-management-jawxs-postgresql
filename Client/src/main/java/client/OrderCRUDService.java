
package client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OrderCRUDService", targetNamespace = "http://service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OrderCRUDService {


    /**
     * 
     * @param character
     * @param orders
     * @return
     *     returns java.util.List<client.Order>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "readByCharacters", targetNamespace = "http://service/", className = "client.ReadByCharacters")
    @ResponseWrapper(localName = "readByCharactersResponse", targetNamespace = "http://service/", className = "client.ReadByCharactersResponse")
    public List<Order> readByCharacters(
        @WebParam(name = "character", targetNamespace = "")
        String character,
        @WebParam(name = "orders", targetNamespace = "")
        List<Order> orders);

    /**
     * 
     * @return
     *     returns java.util.List<client.Order>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loadOrders", targetNamespace = "http://service/", className = "client.LoadOrders")
    @ResponseWrapper(localName = "loadOrdersResponse", targetNamespace = "http://service/", className = "client.LoadOrdersResponse")
    public List<Order> loadOrders();

    /**
     * 
     * @param id
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "delete", targetNamespace = "http://service/", className = "client.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://service/", className = "client.DeleteResponse")
    public boolean delete(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param amount
     * @param description
     * @param delivered
     * @return
     *     returns client.Order
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "create", targetNamespace = "http://service/", className = "client.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://service/", className = "client.CreateResponse")
    public Order create(
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "amount", targetNamespace = "")
        String amount,
        @WebParam(name = "delivered", targetNamespace = "")
        String delivered);

    /**
     * 
     * @param amount
     * @param description
     * @param delivered
     * @param id
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "update", targetNamespace = "http://service/", className = "client.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "http://service/", className = "client.UpdateResponse")
    public boolean update(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "amount", targetNamespace = "")
        String amount,
        @WebParam(name = "delivered", targetNamespace = "")
        String delivered);

}
